# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UpdateVanityNumberByIdParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, call_options=None, recording_source=None, specific_recording_id=None, play_cta=None, ptt_number_id=None):
        """
        UpdateVanityNumberByIdParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'call_options': 'list[str]',
            'recording_source': 'str',
            'specific_recording_id': 'str',
            'play_cta': 'bool',
            'ptt_number_id': 'str'
        }

        self.attribute_map = {
            'call_options': 'call_options',
            'recording_source': 'recording_source',
            'specific_recording_id': 'specific_recording_id',
            'play_cta': 'play_cta',
            'ptt_number_id': 'ptt_number_id'
        }

        self._call_options = call_options
        self._recording_source = recording_source
        self._specific_recording_id = specific_recording_id
        self._play_cta = play_cta
        self._ptt_number_id = ptt_number_id

    @property
    def call_options(self):
        """
        Gets the call_options of this UpdateVanityNumberByIdParameters.
        The options to include when the number is called.  If an option is not included it will be turned off.  Option values should be boolean.  Possible values are: 'voicemail' (Leave A Message), 'ptt' (Push To Talk), 'optin' (Opt-In), 'repeat' (Repeat Your Message) -- Note: Optout cannot be removed without prior authorization.  Please contact customer support for this.

        :return: The call_options of this UpdateVanityNumberByIdParameters.
        :rtype: list[str]
        """
        return self._call_options

    @call_options.setter
    def call_options(self, call_options):
        """
        Sets the call_options of this UpdateVanityNumberByIdParameters.
        The options to include when the number is called.  If an option is not included it will be turned off.  Option values should be boolean.  Possible values are: 'voicemail' (Leave A Message), 'ptt' (Push To Talk), 'optin' (Opt-In), 'repeat' (Repeat Your Message) -- Note: Optout cannot be removed without prior authorization.  Please contact customer support for this.

        :param call_options: The call_options of this UpdateVanityNumberByIdParameters.
        :type: list[str]
        """

        self._call_options = call_options

    @property
    def recording_source(self):
        """
        Gets the recording_source of this UpdateVanityNumberByIdParameters.
        Where the recording will be generated from.  (specific, lastsent, lastuploaded)

        :return: The recording_source of this UpdateVanityNumberByIdParameters.
        :rtype: str
        """
        return self._recording_source

    @recording_source.setter
    def recording_source(self, recording_source):
        """
        Sets the recording_source of this UpdateVanityNumberByIdParameters.
        Where the recording will be generated from.  (specific, lastsent, lastuploaded)

        :param recording_source: The recording_source of this UpdateVanityNumberByIdParameters.
        :type: str
        """

        self._recording_source = recording_source

    @property
    def specific_recording_id(self):
        """
        Gets the specific_recording_id of this UpdateVanityNumberByIdParameters.
        Unique identifier for the recording if recording_source is set to specific.

        :return: The specific_recording_id of this UpdateVanityNumberByIdParameters.
        :rtype: str
        """
        return self._specific_recording_id

    @specific_recording_id.setter
    def specific_recording_id(self, specific_recording_id):
        """
        Sets the specific_recording_id of this UpdateVanityNumberByIdParameters.
        Unique identifier for the recording if recording_source is set to specific.

        :param specific_recording_id: The specific_recording_id of this UpdateVanityNumberByIdParameters.
        :type: str
        """

        self._specific_recording_id = specific_recording_id

    @property
    def play_cta(self):
        """
        Gets the play_cta of this UpdateVanityNumberByIdParameters.
        Setting this to true our system will play the prompts for keys to be pushed.

        :return: The play_cta of this UpdateVanityNumberByIdParameters.
        :rtype: bool
        """
        return self._play_cta

    @play_cta.setter
    def play_cta(self, play_cta):
        """
        Sets the play_cta of this UpdateVanityNumberByIdParameters.
        Setting this to true our system will play the prompts for keys to be pushed.

        :param play_cta: The play_cta of this UpdateVanityNumberByIdParameters.
        :type: bool
        """

        self._play_cta = play_cta

    @property
    def ptt_number_id(self):
        """
        Gets the ptt_number_id of this UpdateVanityNumberByIdParameters.
        This is a verified caller id that is on your account.  This will be used if PTT option is used.

        :return: The ptt_number_id of this UpdateVanityNumberByIdParameters.
        :rtype: str
        """
        return self._ptt_number_id

    @ptt_number_id.setter
    def ptt_number_id(self, ptt_number_id):
        """
        Sets the ptt_number_id of this UpdateVanityNumberByIdParameters.
        This is a verified caller id that is on your account.  This will be used if PTT option is used.

        :param ptt_number_id: The ptt_number_id of this UpdateVanityNumberByIdParameters.
        :type: str
        """

        self._ptt_number_id = ptt_number_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
