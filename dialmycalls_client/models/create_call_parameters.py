# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateCallParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, callerid_id=None, recording_id=None, machine_recording_id=None, send_at=None, send_immediately=None, use_amd=None, send_email=None, accessaccount_id=None, contacts=None, add_ons=None):
        """
        CreateCallParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'callerid_id': 'str',
            'recording_id': 'str',
            'machine_recording_id': 'str',
            'send_at': 'str',
            'send_immediately': 'bool',
            'use_amd': 'bool',
            'send_email': 'bool',
            'accessaccount_id': 'str',
            'contacts': 'list[ContactAttributes]',
            'add_ons': 'list[PushToListenAgain]'
        }

        self.attribute_map = {
            'name': 'name',
            'callerid_id': 'callerid_id',
            'recording_id': 'recording_id',
            'machine_recording_id': 'machine_recording_id',
            'send_at': 'send_at',
            'send_immediately': 'send_immediately',
            'use_amd': 'use_amd',
            'send_email': 'send_email',
            'accessaccount_id': 'accessaccount_id',
            'contacts': 'contacts',
            'add_ons': 'add_ons'
        }

        self._name = name
        self._callerid_id = callerid_id
        self._recording_id = recording_id
        self._machine_recording_id = machine_recording_id
        self._send_at = send_at
        self._send_immediately = send_immediately
        self._use_amd = use_amd
        self._send_email = send_email
        self._accessaccount_id = accessaccount_id
        self._contacts = contacts
        self._add_ons = add_ons

    @property
    def name(self):
        """
        Gets the name of this CreateCallParameters.
        (Required)  Name the broadcast.

        :return: The name of this CreateCallParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateCallParameters.
        (Required)  Name the broadcast.

        :param name: The name of this CreateCallParameters.
        :type: str
        """

        self._name = name

    @property
    def callerid_id(self):
        """
        Gets the callerid_id of this CreateCallParameters.
        (Required)  The caller id that the message should be sent from.

        :return: The callerid_id of this CreateCallParameters.
        :rtype: str
        """
        return self._callerid_id

    @callerid_id.setter
    def callerid_id(self, callerid_id):
        """
        Sets the callerid_id of this CreateCallParameters.
        (Required)  The caller id that the message should be sent from.

        :param callerid_id: The callerid_id of this CreateCallParameters.
        :type: str
        """

        self._callerid_id = callerid_id

    @property
    def recording_id(self):
        """
        Gets the recording_id of this CreateCallParameters.
        (Required)  The recording id of the message that should be played.

        :return: The recording_id of this CreateCallParameters.
        :rtype: str
        """
        return self._recording_id

    @recording_id.setter
    def recording_id(self, recording_id):
        """
        Sets the recording_id of this CreateCallParameters.
        (Required)  The recording id of the message that should be played.

        :param recording_id: The recording_id of this CreateCallParameters.
        :type: str
        """

        self._recording_id = recording_id

    @property
    def machine_recording_id(self):
        """
        Gets the machine_recording_id of this CreateCallParameters.
        The recording id of the message that should be played on answering machines.  If not supplied the recording_id will be used.  use_amd must be true in order for this feature to work.

        :return: The machine_recording_id of this CreateCallParameters.
        :rtype: str
        """
        return self._machine_recording_id

    @machine_recording_id.setter
    def machine_recording_id(self, machine_recording_id):
        """
        Sets the machine_recording_id of this CreateCallParameters.
        The recording id of the message that should be played on answering machines.  If not supplied the recording_id will be used.  use_amd must be true in order for this feature to work.

        :param machine_recording_id: The machine_recording_id of this CreateCallParameters.
        :type: str
        """

        self._machine_recording_id = machine_recording_id

    @property
    def send_at(self):
        """
        Gets the send_at of this CreateCallParameters.
        When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)

        :return: The send_at of this CreateCallParameters.
        :rtype: str
        """
        return self._send_at

    @send_at.setter
    def send_at(self, send_at):
        """
        Sets the send_at of this CreateCallParameters.
        When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)

        :param send_at: The send_at of this CreateCallParameters.
        :type: str
        """

        self._send_at = send_at

    @property
    def send_immediately(self):
        """
        Gets the send_immediately of this CreateCallParameters.
        Should the broadcast go out immediately?

        :return: The send_immediately of this CreateCallParameters.
        :rtype: bool
        """
        return self._send_immediately

    @send_immediately.setter
    def send_immediately(self, send_immediately):
        """
        Sets the send_immediately of this CreateCallParameters.
        Should the broadcast go out immediately?

        :param send_immediately: The send_immediately of this CreateCallParameters.
        :type: bool
        """

        self._send_immediately = send_immediately

    @property
    def use_amd(self):
        """
        Gets the use_amd of this CreateCallParameters.
        Using answering machine detection?

        :return: The use_amd of this CreateCallParameters.
        :rtype: bool
        """
        return self._use_amd

    @use_amd.setter
    def use_amd(self, use_amd):
        """
        Sets the use_amd of this CreateCallParameters.
        Using answering machine detection?

        :param use_amd: The use_amd of this CreateCallParameters.
        :type: bool
        """

        self._use_amd = use_amd

    @property
    def send_email(self):
        """
        Gets the send_email of this CreateCallParameters.
        Also send an email to the contacts?

        :return: The send_email of this CreateCallParameters.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """
        Sets the send_email of this CreateCallParameters.
        Also send an email to the contacts?

        :param send_email: The send_email of this CreateCallParameters.
        :type: bool
        """

        self._send_email = send_email

    @property
    def accessaccount_id(self):
        """
        Gets the accessaccount_id of this CreateCallParameters.
        Schedule this broadcast as an access account.

        :return: The accessaccount_id of this CreateCallParameters.
        :rtype: str
        """
        return self._accessaccount_id

    @accessaccount_id.setter
    def accessaccount_id(self, accessaccount_id):
        """
        Sets the accessaccount_id of this CreateCallParameters.
        Schedule this broadcast as an access account.

        :param accessaccount_id: The accessaccount_id of this CreateCallParameters.
        :type: str
        """

        self._accessaccount_id = accessaccount_id

    @property
    def contacts(self):
        """
        Gets the contacts of this CreateCallParameters.
        (Required)  List of contact information that should be sent the broadcast.

        :return: The contacts of this CreateCallParameters.
        :rtype: list[ContactAttributes]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this CreateCallParameters.
        (Required)  List of contact information that should be sent the broadcast.

        :param contacts: The contacts of this CreateCallParameters.
        :type: list[ContactAttributes]
        """

        self._contacts = contacts

    @property
    def add_ons(self):
        """
        Gets the add_ons of this CreateCallParameters.
        A list of feature add-ons for the calls.

        :return: The add_ons of this CreateCallParameters.
        :rtype: list[PushToListenAgain]
        """
        return self._add_ons

    @add_ons.setter
    def add_ons(self, add_ons):
        """
        Sets the add_ons of this CreateCallParameters.
        A list of feature add-ons for the calls.

        :param add_ons: The add_ons of this CreateCallParameters.
        :type: list[PushToListenAgain]
        """

        self._add_ons = add_ons

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
