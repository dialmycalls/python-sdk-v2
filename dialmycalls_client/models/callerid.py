# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Callerid(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, phone=None, approved=None, created_at=None, updated_at=None):
        """
        Callerid - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'phone': 'str',
            'approved': 'bool',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'phone': 'phone',
            'approved': 'approved',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._name = name
        self._phone = phone
        self._approved = approved
        self._created_at = created_at
        self._updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Callerid.
        Unique identifier for this caller ID.

        :return: The id of this Callerid.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Callerid.
        Unique identifier for this caller ID.

        :param id: The id of this Callerid.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Callerid.
        The name of the caller ID.

        :return: The name of this Callerid.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Callerid.
        The name of the caller ID.

        :param name: The name of this Callerid.
        :type: str
        """

        self._name = name

    @property
    def phone(self):
        """
        Gets the phone of this Callerid.
        The caller ID phone number.

        :return: The phone of this Callerid.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Callerid.
        The caller ID phone number.

        :param phone: The phone of this Callerid.
        :type: str
        """

        self._phone = phone

    @property
    def approved(self):
        """
        Gets the approved of this Callerid.
        Whether this caller ID is approved for use.

        :return: The approved of this Callerid.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """
        Sets the approved of this Callerid.
        Whether this caller ID is approved for use.

        :param approved: The approved of this Callerid.
        :type: bool
        """

        self._approved = approved

    @property
    def created_at(self):
        """
        Gets the created_at of this Callerid.
        When the caller id was created.

        :return: The created_at of this Callerid.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Callerid.
        When the caller id was created.

        :param created_at: The created_at of this Callerid.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Callerid.
        When the caller id was last updated.

        :return: The updated_at of this Callerid.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Callerid.
        When the caller id was last updated.

        :param updated_at: The updated_at of this Callerid.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
