# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Callservice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, accessaccount_id=None, name=None, recording_id=None, pending_cancel=None, credit_cost=None, total_recipients=None, send_at=None, created_at=None, updated_at=None):
        """
        Callservice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'accessaccount_id': 'str',
            'name': 'str',
            'recording_id': 'str',
            'pending_cancel': 'bool',
            'credit_cost': 'float',
            'total_recipients': 'float',
            'send_at': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'accessaccount_id': 'accessaccount_id',
            'name': 'name',
            'recording_id': 'recording_id',
            'pending_cancel': 'pending_cancel',
            'credit_cost': 'credit_cost',
            'total_recipients': 'total_recipients',
            'send_at': 'send_at',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._accessaccount_id = accessaccount_id
        self._name = name
        self._recording_id = recording_id
        self._pending_cancel = pending_cancel
        self._credit_cost = credit_cost
        self._total_recipients = total_recipients
        self._send_at = send_at
        self._created_at = created_at
        self._updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Callservice.
        Unique identifier for this service.

        :return: The id of this Callservice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Callservice.
        Unique identifier for this service.

        :param id: The id of this Callservice.
        :type: str
        """

        self._id = id

    @property
    def accessaccount_id(self):
        """
        Gets the accessaccount_id of this Callservice.
        Unique identifier for the access account which initiated this if available.

        :return: The accessaccount_id of this Callservice.
        :rtype: str
        """
        return self._accessaccount_id

    @accessaccount_id.setter
    def accessaccount_id(self, accessaccount_id):
        """
        Sets the accessaccount_id of this Callservice.
        Unique identifier for the access account which initiated this if available.

        :param accessaccount_id: The accessaccount_id of this Callservice.
        :type: str
        """

        self._accessaccount_id = accessaccount_id

    @property
    def name(self):
        """
        Gets the name of this Callservice.
        The name of the service.

        :return: The name of this Callservice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Callservice.
        The name of the service.

        :param name: The name of this Callservice.
        :type: str
        """

        self._name = name

    @property
    def recording_id(self):
        """
        Gets the recording_id of this Callservice.
        Unique identifier for the recording.

        :return: The recording_id of this Callservice.
        :rtype: str
        """
        return self._recording_id

    @recording_id.setter
    def recording_id(self, recording_id):
        """
        Sets the recording_id of this Callservice.
        Unique identifier for the recording.

        :param recording_id: The recording_id of this Callservice.
        :type: str
        """

        self._recording_id = recording_id

    @property
    def pending_cancel(self):
        """
        Gets the pending_cancel of this Callservice.
        Whether the service has been flagged to be cancelled.

        :return: The pending_cancel of this Callservice.
        :rtype: bool
        """
        return self._pending_cancel

    @pending_cancel.setter
    def pending_cancel(self, pending_cancel):
        """
        Sets the pending_cancel of this Callservice.
        Whether the service has been flagged to be cancelled.

        :param pending_cancel: The pending_cancel of this Callservice.
        :type: bool
        """

        self._pending_cancel = pending_cancel

    @property
    def credit_cost(self):
        """
        Gets the credit_cost of this Callservice.
        The amount of credits required to schedule this service.

        :return: The credit_cost of this Callservice.
        :rtype: float
        """
        return self._credit_cost

    @credit_cost.setter
    def credit_cost(self, credit_cost):
        """
        Sets the credit_cost of this Callservice.
        The amount of credits required to schedule this service.

        :param credit_cost: The credit_cost of this Callservice.
        :type: float
        """

        self._credit_cost = credit_cost

    @property
    def total_recipients(self):
        """
        Gets the total_recipients of this Callservice.
        The amount of recipients for this service.

        :return: The total_recipients of this Callservice.
        :rtype: float
        """
        return self._total_recipients

    @total_recipients.setter
    def total_recipients(self, total_recipients):
        """
        Sets the total_recipients of this Callservice.
        The amount of recipients for this service.

        :param total_recipients: The total_recipients of this Callservice.
        :type: float
        """

        self._total_recipients = total_recipients

    @property
    def send_at(self):
        """
        Gets the send_at of this Callservice.
        When the service will be sent.

        :return: The send_at of this Callservice.
        :rtype: str
        """
        return self._send_at

    @send_at.setter
    def send_at(self, send_at):
        """
        Sets the send_at of this Callservice.
        When the service will be sent.

        :param send_at: The send_at of this Callservice.
        :type: str
        """

        self._send_at = send_at

    @property
    def created_at(self):
        """
        Gets the created_at of this Callservice.
        When the service was created.

        :return: The created_at of this Callservice.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Callservice.
        When the service was created.

        :param created_at: The created_at of this Callservice.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Callservice.
        When the service was last updated.

        :return: The updated_at of this Callservice.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Callservice.
        When the service was last updated.

        :param updated_at: The updated_at of this Callservice.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
