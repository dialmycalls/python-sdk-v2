# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateRecordingByPhoneParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, callerid_id=None, whitelabel=None, phone=None, extension=None):
        """
        CreateRecordingByPhoneParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'callerid_id': 'str',
            'whitelabel': 'bool',
            'phone': 'str',
            'extension': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'callerid_id': 'callerid_id',
            'whitelabel': 'whitelabel',
            'phone': 'phone',
            'extension': 'extension'
        }

        self._name = name
        self._callerid_id = callerid_id
        self._whitelabel = whitelabel
        self._phone = phone
        self._extension = extension

    @property
    def name(self):
        """
        Gets the name of this CreateRecordingByPhoneParameters.
        (Required)  The name of the recording.

        :return: The name of this CreateRecordingByPhoneParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateRecordingByPhoneParameters.
        (Required)  The name of the recording.

        :param name: The name of this CreateRecordingByPhoneParameters.
        :type: str
        """

        self._name = name

    @property
    def callerid_id(self):
        """
        Gets the callerid_id of this CreateRecordingByPhoneParameters.
        The caller id that the create recording message should be sent from.

        :return: The callerid_id of this CreateRecordingByPhoneParameters.
        :rtype: str
        """
        return self._callerid_id

    @callerid_id.setter
    def callerid_id(self, callerid_id):
        """
        Sets the callerid_id of this CreateRecordingByPhoneParameters.
        The caller id that the create recording message should be sent from.

        :param callerid_id: The callerid_id of this CreateRecordingByPhoneParameters.
        :type: str
        """

        self._callerid_id = callerid_id

    @property
    def whitelabel(self):
        """
        Gets the whitelabel of this CreateRecordingByPhoneParameters.
        Add or remove the DialMyCalls intro message.

        :return: The whitelabel of this CreateRecordingByPhoneParameters.
        :rtype: bool
        """
        return self._whitelabel

    @whitelabel.setter
    def whitelabel(self, whitelabel):
        """
        Sets the whitelabel of this CreateRecordingByPhoneParameters.
        Add or remove the DialMyCalls intro message.

        :param whitelabel: The whitelabel of this CreateRecordingByPhoneParameters.
        :type: bool
        """

        self._whitelabel = whitelabel

    @property
    def phone(self):
        """
        Gets the phone of this CreateRecordingByPhoneParameters.
        (Required)  The recipient's phone number who will record the message.

        :return: The phone of this CreateRecordingByPhoneParameters.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this CreateRecordingByPhoneParameters.
        (Required)  The recipient's phone number who will record the message.

        :param phone: The phone of this CreateRecordingByPhoneParameters.
        :type: str
        """

        self._phone = phone

    @property
    def extension(self):
        """
        Gets the extension of this CreateRecordingByPhoneParameters.
        The recipient's phone extension up to 10 numeric digits.

        :return: The extension of this CreateRecordingByPhoneParameters.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this CreateRecordingByPhoneParameters.
        The recipient's phone extension up to 10 numeric digits.

        :param extension: The extension of this CreateRecordingByPhoneParameters.
        :type: str
        """

        self._extension = extension

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
