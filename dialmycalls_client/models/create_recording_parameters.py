# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateRecordingParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, gender=None, language=None, text=None):
        """
        CreateRecordingParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'gender': 'str',
            'language': 'str',
            'text': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'gender': 'gender',
            'language': 'language',
            'text': 'text'
        }

        self._name = name
        self._gender = gender
        self._language = language
        self._text = text

    @property
    def name(self):
        """
        Gets the name of this CreateRecordingParameters.
        (Required)  The name of the recording.

        :return: The name of this CreateRecordingParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateRecordingParameters.
        (Required)  The name of the recording.

        :param name: The name of this CreateRecordingParameters.
        :type: str
        """

        self._name = name

    @property
    def gender(self):
        """
        Gets the gender of this CreateRecordingParameters.
        (Required)  Gender of the recording. Options: M or F

        :return: The gender of this CreateRecordingParameters.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this CreateRecordingParameters.
        (Required)  Gender of the recording. Options: M or F

        :param gender: The gender of this CreateRecordingParameters.
        :type: str
        """

        self._gender = gender

    @property
    def language(self):
        """
        Gets the language of this CreateRecordingParameters.
        (Required)  The language of the recording. Options: en, es

        :return: The language of this CreateRecordingParameters.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this CreateRecordingParameters.
        (Required)  The language of the recording. Options: en, es

        :param language: The language of this CreateRecordingParameters.
        :type: str
        """

        self._language = language

    @property
    def text(self):
        """
        Gets the text of this CreateRecordingParameters.
        (Required)  The text to convert to speech.

        :return: The text of this CreateRecordingParameters.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this CreateRecordingParameters.
        (Required)  The text to convert to speech.

        :param text: The text of this CreateRecordingParameters.
        :type: str
        """

        self._text = text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
