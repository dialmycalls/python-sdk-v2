# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CallRecipient(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, firstname=None, lastname=None, miscellaneous=None, email=None, phone=None, extension=None, status=None, duration=None, add_on=None, attempts=None, successful=None, called_at=None):
        """
        CallRecipient - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'firstname': 'str',
            'lastname': 'str',
            'miscellaneous': 'str',
            'email': 'str',
            'phone': 'str',
            'extension': 'str',
            'status': 'str',
            'duration': 'int',
            'add_on': 'str',
            'attempts': 'str',
            'successful': 'bool',
            'called_at': 'str'
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'miscellaneous': 'miscellaneous',
            'email': 'email',
            'phone': 'phone',
            'extension': 'extension',
            'status': 'status',
            'duration': 'duration',
            'add_on': 'add_on',
            'attempts': 'attempts',
            'successful': 'successful',
            'called_at': 'called_at'
        }

        self._firstname = firstname
        self._lastname = lastname
        self._miscellaneous = miscellaneous
        self._email = email
        self._phone = phone
        self._extension = extension
        self._status = status
        self._duration = duration
        self._add_on = add_on
        self._attempts = attempts
        self._successful = successful
        self._called_at = called_at

    @property
    def firstname(self):
        """
        Gets the firstname of this CallRecipient.
        The recipient's first name.

        :return: The firstname of this CallRecipient.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this CallRecipient.
        The recipient's first name.

        :param firstname: The firstname of this CallRecipient.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this CallRecipient.
        The recipient's last name.

        :return: The lastname of this CallRecipient.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this CallRecipient.
        The recipient's last name.

        :param lastname: The lastname of this CallRecipient.
        :type: str
        """

        self._lastname = lastname

    @property
    def miscellaneous(self):
        """
        Gets the miscellaneous of this CallRecipient.
        Miscellaneous information.

        :return: The miscellaneous of this CallRecipient.
        :rtype: str
        """
        return self._miscellaneous

    @miscellaneous.setter
    def miscellaneous(self, miscellaneous):
        """
        Sets the miscellaneous of this CallRecipient.
        Miscellaneous information.

        :param miscellaneous: The miscellaneous of this CallRecipient.
        :type: str
        """

        self._miscellaneous = miscellaneous

    @property
    def email(self):
        """
        Gets the email of this CallRecipient.
        The recipient's email address.

        :return: The email of this CallRecipient.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CallRecipient.
        The recipient's email address.

        :param email: The email of this CallRecipient.
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """
        Gets the phone of this CallRecipient.
        The recipient's phone number.

        :return: The phone of this CallRecipient.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this CallRecipient.
        The recipient's phone number.

        :param phone: The phone of this CallRecipient.
        :type: str
        """

        self._phone = phone

    @property
    def extension(self):
        """
        Gets the extension of this CallRecipient.
        The recipient's phone extension.

        :return: The extension of this CallRecipient.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this CallRecipient.
        The recipient's phone extension.

        :param extension: The extension of this CallRecipient.
        :type: str
        """

        self._extension = extension

    @property
    def status(self):
        """
        Gets the status of this CallRecipient.
        Status of the call. Options: live_answer, vm, busy, no_answer, dialing, not_connected, queued

        :return: The status of this CallRecipient.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CallRecipient.
        Status of the call. Options: live_answer, vm, busy, no_answer, dialing, not_connected, queued

        :param status: The status of this CallRecipient.
        :type: str
        """

        self._status = status

    @property
    def duration(self):
        """
        Gets the duration of this CallRecipient.
        Duration of the call in seconds.

        :return: The duration of this CallRecipient.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this CallRecipient.
        Duration of the call in seconds.

        :param duration: The duration of this CallRecipient.
        :type: int
        """

        self._duration = duration

    @property
    def add_on(self):
        """
        Gets the add_on of this CallRecipient.
        Result from add-on feature.

        :return: The add_on of this CallRecipient.
        :rtype: str
        """
        return self._add_on

    @add_on.setter
    def add_on(self, add_on):
        """
        Sets the add_on of this CallRecipient.
        Result from add-on feature.

        :param add_on: The add_on of this CallRecipient.
        :type: str
        """

        self._add_on = add_on

    @property
    def attempts(self):
        """
        Gets the attempts of this CallRecipient.
        Number of attempts to call was made.

        :return: The attempts of this CallRecipient.
        :rtype: str
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """
        Sets the attempts of this CallRecipient.
        Number of attempts to call was made.

        :param attempts: The attempts of this CallRecipient.
        :type: str
        """

        self._attempts = attempts

    @property
    def successful(self):
        """
        Gets the successful of this CallRecipient.
        Whether the call was successful or not.

        :return: The successful of this CallRecipient.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """
        Sets the successful of this CallRecipient.
        Whether the call was successful or not.

        :param successful: The successful of this CallRecipient.
        :type: bool
        """

        self._successful = successful

    @property
    def called_at(self):
        """
        Gets the called_at of this CallRecipient.
        When the recipient was contacted.

        :return: The called_at of this CallRecipient.
        :rtype: str
        """
        return self._called_at

    @called_at.setter
    def called_at(self, called_at):
        """
        Sets the called_at of this CallRecipient.
        When the recipient was contacted.

        :param called_at: The called_at of this CallRecipient.
        :type: str
        """

        self._called_at = called_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
