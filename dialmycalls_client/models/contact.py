# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Contact(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, firstname=None, lastname=None, miscellaneous=None, phone=None, extension=None, email=None, extra1=None, groups=None, created_at=None, updated_at=None):
        """
        Contact - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'miscellaneous': 'str',
            'phone': 'str',
            'extension': 'str',
            'email': 'str',
            'extra1': 'str',
            'groups': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'miscellaneous': 'miscellaneous',
            'phone': 'phone',
            'extension': 'extension',
            'email': 'email',
            'extra1': 'extra1',
            'groups': 'groups',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._firstname = firstname
        self._lastname = lastname
        self._miscellaneous = miscellaneous
        self._phone = phone
        self._extension = extension
        self._email = email
        self._extra1 = extra1
        self._groups = groups
        self._created_at = created_at
        self._updated_at = updated_at

    @property
    def id(self):
        """
        Gets the id of this Contact.
        Unique identifier for this contact.

        :return: The id of this Contact.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Contact.
        Unique identifier for this contact.

        :param id: The id of this Contact.
        :type: str
        """

        self._id = id

    @property
    def firstname(self):
        """
        Gets the firstname of this Contact.
        The contact's first name.

        :return: The firstname of this Contact.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this Contact.
        The contact's first name.

        :param firstname: The firstname of this Contact.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this Contact.
        The contact's last name.

        :return: The lastname of this Contact.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this Contact.
        The contact's last name.

        :param lastname: The lastname of this Contact.
        :type: str
        """

        self._lastname = lastname

    @property
    def miscellaneous(self):
        """
        Gets the miscellaneous of this Contact.
        Miscellaneous information.

        :return: The miscellaneous of this Contact.
        :rtype: str
        """
        return self._miscellaneous

    @miscellaneous.setter
    def miscellaneous(self, miscellaneous):
        """
        Sets the miscellaneous of this Contact.
        Miscellaneous information.

        :param miscellaneous: The miscellaneous of this Contact.
        :type: str
        """

        self._miscellaneous = miscellaneous

    @property
    def phone(self):
        """
        Gets the phone of this Contact.
        The contact's phone number.

        :return: The phone of this Contact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Contact.
        The contact's phone number.

        :param phone: The phone of this Contact.
        :type: str
        """

        self._phone = phone

    @property
    def extension(self):
        """
        Gets the extension of this Contact.
        The contact's phone extension.

        :return: The extension of this Contact.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this Contact.
        The contact's phone extension.

        :param extension: The extension of this Contact.
        :type: str
        """

        self._extension = extension

    @property
    def email(self):
        """
        Gets the email of this Contact.
        The contact's email address.

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Contact.
        The contact's email address.

        :param email: The email of this Contact.
        :type: str
        """

        self._email = email

    @property
    def extra1(self):
        """
        Gets the extra1 of this Contact.
        Miscellaneous data about this contact.

        :return: The extra1 of this Contact.
        :rtype: str
        """
        return self._extra1

    @extra1.setter
    def extra1(self, extra1):
        """
        Sets the extra1 of this Contact.
        Miscellaneous data about this contact.

        :param extra1: The extra1 of this Contact.
        :type: str
        """

        self._extra1 = extra1

    @property
    def groups(self):
        """
        Gets the groups of this Contact.
        List of groups that this contact belongs to.

        :return: The groups of this Contact.
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this Contact.
        List of groups that this contact belongs to.

        :param groups: The groups of this Contact.
        :type: str
        """

        self._groups = groups

    @property
    def created_at(self):
        """
        Gets the created_at of this Contact.
        When the contact was created.

        :return: The created_at of this Contact.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Contact.
        When the contact was created.

        :param created_at: The created_at of this Contact.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Contact.
        When the contact was last updated.

        :return: The updated_at of this Contact.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Contact.
        When the contact was last updated.

        :param updated_at: The updated_at of this Contact.
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
