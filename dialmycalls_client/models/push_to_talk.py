# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PushToTalk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, callerid_id=None, ringtone=None, cpm=None, add_message=None):
        """
        PushToTalk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'callerid_id': 'str',
            'ringtone': 'str',
            'cpm': 'int',
            'add_message': 'object'
        }

        self.attribute_map = {
            'type': 'type',
            'callerid_id': 'callerid_id',
            'ringtone': 'ringtone',
            'cpm': 'cpm',
            'add_message': 'add_message'
        }

        self._type = type
        self._callerid_id = callerid_id
        self._ringtone = ringtone
        self._cpm = cpm
        self._add_message = add_message

    @property
    def type(self):
        """
        Gets the type of this PushToTalk.
        The add-on type. Option: ptt

        :return: The type of this PushToTalk.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PushToTalk.
        The add-on type. Option: ptt

        :param type: The type of this PushToTalk.
        :type: str
        """

        self._type = type

    @property
    def callerid_id(self):
        """
        Gets the callerid_id of this PushToTalk.
        Phone number to connect the caller to.

        :return: The callerid_id of this PushToTalk.
        :rtype: str
        """
        return self._callerid_id

    @callerid_id.setter
    def callerid_id(self, callerid_id):
        """
        Sets the callerid_id of this PushToTalk.
        Phone number to connect the caller to.

        :param callerid_id: The callerid_id of this PushToTalk.
        :type: str
        """

        self._callerid_id = callerid_id

    @property
    def ringtone(self):
        """
        Gets the ringtone of this PushToTalk.
        The ringtone to play to the user when connecting. Options: <a href=\"/onhold/elevator.mp3\" target=\"_blank\">elevator_music</a>, <a href=\"/onhold/islandfever.mp3\" target=\"_blank\">caribbean_music</a>, <a href=\"/onhold/mozartmarch.mp3\" target=\"_blank\">classical_music</a>, <a href=\"/onhold/digitalring.mp3\" target=\"_blank\">digital_ringing</a>, <a href=\"/onhold/oldring.mp3\" target=\"_blank\">old_phone_ringing</a>, <a href=\"/onhold/whenim46.mp3\" target=\"_blank\">goofy_music</a>

        :return: The ringtone of this PushToTalk.
        :rtype: str
        """
        return self._ringtone

    @ringtone.setter
    def ringtone(self, ringtone):
        """
        Sets the ringtone of this PushToTalk.
        The ringtone to play to the user when connecting. Options: <a href=\"/onhold/elevator.mp3\" target=\"_blank\">elevator_music</a>, <a href=\"/onhold/islandfever.mp3\" target=\"_blank\">caribbean_music</a>, <a href=\"/onhold/mozartmarch.mp3\" target=\"_blank\">classical_music</a>, <a href=\"/onhold/digitalring.mp3\" target=\"_blank\">digital_ringing</a>, <a href=\"/onhold/oldring.mp3\" target=\"_blank\">old_phone_ringing</a>, <a href=\"/onhold/whenim46.mp3\" target=\"_blank\">goofy_music</a>

        :param ringtone: The ringtone of this PushToTalk.
        :type: str
        """

        self._ringtone = ringtone

    @property
    def cpm(self):
        """
        Gets the cpm of this PushToTalk.
        Calls per minute throttling.

        :return: The cpm of this PushToTalk.
        :rtype: int
        """
        return self._cpm

    @cpm.setter
    def cpm(self, cpm):
        """
        Sets the cpm of this PushToTalk.
        Calls per minute throttling.

        :param cpm: The cpm of this PushToTalk.
        :type: int
        """

        self._cpm = cpm

    @property
    def add_message(self):
        """
        Gets the add_message of this PushToTalk.
        Add a generic add-on message.

        :return: The add_message of this PushToTalk.
        :rtype: object
        """
        return self._add_message

    @add_message.setter
    def add_message(self, add_message):
        """
        Sets the add_message of this PushToTalk.
        Add a generic add-on message.

        :param add_message: The add_message of this PushToTalk.
        :type: object
        """

        self._add_message = add_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
