# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateTextParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, keyword_id=None, messages=None, send_at=None, send_immediately=None, send_email=None, accessaccount_id=None, shortcode_id=None, concatenate_sms=None, contacts=None):
        """
        CreateTextParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'keyword_id': 'str',
            'messages': 'list[str]',
            'send_at': 'str',
            'send_immediately': 'bool',
            'send_email': 'bool',
            'accessaccount_id': 'str',
            'shortcode_id': 'str',
            'concatenate_sms': 'bool',
            'contacts': 'list[ContactAttributes]'
        }

        self.attribute_map = {
            'name': 'name',
            'keyword_id': 'keyword_id',
            'messages': 'messages',
            'send_at': 'send_at',
            'send_immediately': 'send_immediately',
            'send_email': 'send_email',
            'accessaccount_id': 'accessaccount_id',
            'shortcode_id': 'shortcode_id',
            'concatenate_sms': 'concatenate_sms',
            'contacts': 'contacts'
        }

        self._name = name
        self._keyword_id = keyword_id
        self._messages = messages
        self._send_at = send_at
        self._send_immediately = send_immediately
        self._send_email = send_email
        self._accessaccount_id = accessaccount_id
        self._shortcode_id = shortcode_id
        self._concatenate_sms = concatenate_sms
        self._contacts = contacts

    @property
    def name(self):
        """
        Gets the name of this CreateTextParameters.
        (Required)  Name the broadcast.

        :return: The name of this CreateTextParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateTextParameters.
        (Required)  Name the broadcast.

        :param name: The name of this CreateTextParameters.
        :type: str
        """

        self._name = name

    @property
    def keyword_id(self):
        """
        Gets the keyword_id of this CreateTextParameters.
        (Required)  The keyword id that should be associated with this broadcast.

        :return: The keyword_id of this CreateTextParameters.
        :rtype: str
        """
        return self._keyword_id

    @keyword_id.setter
    def keyword_id(self, keyword_id):
        """
        Sets the keyword_id of this CreateTextParameters.
        (Required)  The keyword id that should be associated with this broadcast.

        :param keyword_id: The keyword_id of this CreateTextParameters.
        :type: str
        """

        self._keyword_id = keyword_id

    @property
    def messages(self):
        """
        Gets the messages of this CreateTextParameters.
        (Required)  List of messages to send (up to 10).

        :return: The messages of this CreateTextParameters.
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this CreateTextParameters.
        (Required)  List of messages to send (up to 10).

        :param messages: The messages of this CreateTextParameters.
        :type: list[str]
        """

        self._messages = messages

    @property
    def send_at(self):
        """
        Gets the send_at of this CreateTextParameters.
        When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)

        :return: The send_at of this CreateTextParameters.
        :rtype: str
        """
        return self._send_at

    @send_at.setter
    def send_at(self, send_at):
        """
        Sets the send_at of this CreateTextParameters.
        When the broadcast should be sent. (Ex: 2016-07-25T12:00:00+0000)

        :param send_at: The send_at of this CreateTextParameters.
        :type: str
        """

        self._send_at = send_at

    @property
    def send_immediately(self):
        """
        Gets the send_immediately of this CreateTextParameters.
        Should the broadcast go out immediately?

        :return: The send_immediately of this CreateTextParameters.
        :rtype: bool
        """
        return self._send_immediately

    @send_immediately.setter
    def send_immediately(self, send_immediately):
        """
        Sets the send_immediately of this CreateTextParameters.
        Should the broadcast go out immediately?

        :param send_immediately: The send_immediately of this CreateTextParameters.
        :type: bool
        """

        self._send_immediately = send_immediately

    @property
    def send_email(self):
        """
        Gets the send_email of this CreateTextParameters.
        Also send an email to the contacts?

        :return: The send_email of this CreateTextParameters.
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """
        Sets the send_email of this CreateTextParameters.
        Also send an email to the contacts?

        :param send_email: The send_email of this CreateTextParameters.
        :type: bool
        """

        self._send_email = send_email

    @property
    def accessaccount_id(self):
        """
        Gets the accessaccount_id of this CreateTextParameters.
        Schedule this broadcast as an access account.

        :return: The accessaccount_id of this CreateTextParameters.
        :rtype: str
        """
        return self._accessaccount_id

    @accessaccount_id.setter
    def accessaccount_id(self, accessaccount_id):
        """
        Sets the accessaccount_id of this CreateTextParameters.
        Schedule this broadcast as an access account.

        :param accessaccount_id: The accessaccount_id of this CreateTextParameters.
        :type: str
        """

        self._accessaccount_id = accessaccount_id

    @property
    def shortcode_id(self):
        """
        Gets the shortcode_id of this CreateTextParameters.
        The shortcode id that the broadcast will be sent from.

        :return: The shortcode_id of this CreateTextParameters.
        :rtype: str
        """
        return self._shortcode_id

    @shortcode_id.setter
    def shortcode_id(self, shortcode_id):
        """
        Sets the shortcode_id of this CreateTextParameters.
        The shortcode id that the broadcast will be sent from.

        :param shortcode_id: The shortcode_id of this CreateTextParameters.
        :type: str
        """

        self._shortcode_id = shortcode_id

    @property
    def concatenate_sms(self):
        """
        Gets the concatenate_sms of this CreateTextParameters.
        Combine all SMS messages into 1 message on the end users device.

        :return: The concatenate_sms of this CreateTextParameters.
        :rtype: bool
        """
        return self._concatenate_sms

    @concatenate_sms.setter
    def concatenate_sms(self, concatenate_sms):
        """
        Sets the concatenate_sms of this CreateTextParameters.
        Combine all SMS messages into 1 message on the end users device.

        :param concatenate_sms: The concatenate_sms of this CreateTextParameters.
        :type: bool
        """

        self._concatenate_sms = concatenate_sms

    @property
    def contacts(self):
        """
        Gets the contacts of this CreateTextParameters.
        (Required)  List of contact information that should be sent the broadcast.

        :return: The contacts of this CreateTextParameters.
        :rtype: list[ContactAttributes]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this CreateTextParameters.
        (Required)  List of contact information that should be sent the broadcast.

        :param contacts: The contacts of this CreateTextParameters.
        :type: list[ContactAttributes]
        """

        self._contacts = contacts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
