# coding: utf-8

"""
    DialMyCalls API

    The DialMyCalls API

    OpenAPI spec version: 2.0.1
    Contact: support@dialmycalls.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CallerIdsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_caller_id(self, create_caller_id_parameters, **kwargs):
        """
        Add Caller ID
        Add a caller ID. <br><br> Returns a caller ID object on success, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/callerid ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_caller_id(create_caller_id_parameters, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCallerIdParameters create_caller_id_parameters: Request body (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_caller_id_with_http_info(create_caller_id_parameters, **kwargs)
        else:
            (data) = self.create_caller_id_with_http_info(create_caller_id_parameters, **kwargs)
            return data

    def create_caller_id_with_http_info(self, create_caller_id_parameters, **kwargs):
        """
        Add Caller ID
        Add a caller ID. <br><br> Returns a caller ID object on success, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/callerid ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_caller_id_with_http_info(create_caller_id_parameters, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateCallerIdParameters create_caller_id_parameters: Request body (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_caller_id_parameters']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_caller_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_caller_id_parameters' is set
        if ('create_caller_id_parameters' not in params) or (params['create_caller_id_parameters'] is None):
            raise ValueError("Missing the required parameter `create_caller_id_parameters` when calling `create_caller_id`")

        resource_path = '/callerid'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_caller_id_parameters' in params:
            body_params = params['create_caller_id_parameters']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_unverified_caller_id(self, create_unverified_caller_id_parameters, **kwargs):
        """
        Add Caller ID (Unverified)
        Initiate adding a new caller ID when you need to go through the verification process. You will receive a phone call at the phone number provided and will need to make a subsequent API call with the PIN code that you are provided. <br><br> Returns a caller ID object on success, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_unverified_caller_id(create_unverified_caller_id_parameters, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateUnverifiedCallerIdParameters create_unverified_caller_id_parameters: Request body (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_unverified_caller_id_with_http_info(create_unverified_caller_id_parameters, **kwargs)
        else:
            (data) = self.create_unverified_caller_id_with_http_info(create_unverified_caller_id_parameters, **kwargs)
            return data

    def create_unverified_caller_id_with_http_info(self, create_unverified_caller_id_parameters, **kwargs):
        """
        Add Caller ID (Unverified)
        Initiate adding a new caller ID when you need to go through the verification process. You will receive a phone call at the phone number provided and will need to make a subsequent API call with the PIN code that you are provided. <br><br> Returns a caller ID object on success, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_unverified_caller_id_with_http_info(create_unverified_caller_id_parameters, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateUnverifiedCallerIdParameters create_unverified_caller_id_parameters: Request body (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_unverified_caller_id_parameters']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_unverified_caller_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_unverified_caller_id_parameters' is set
        if ('create_unverified_caller_id_parameters' not in params) or (params['create_unverified_caller_id_parameters'] is None):
            raise ValueError("Missing the required parameter `create_unverified_caller_id_parameters` when calling `create_unverified_caller_id`")

        resource_path = '/verify/callerid'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_unverified_caller_id_parameters' in params:
            body_params = params['create_unverified_caller_id_parameters']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_caller_id_by_id(self, callerid_id, **kwargs):
        """
        Delete Caller ID
        Delete a caller ID. <br><br> Returns the following if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_caller_id_by_id(callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_caller_id_by_id_with_http_info(callerid_id, **kwargs)
        else:
            (data) = self.delete_caller_id_by_id_with_http_info(callerid_id, **kwargs)
            return data

    def delete_caller_id_by_id_with_http_info(self, callerid_id, **kwargs):
        """
        Delete Caller ID
        Delete a caller ID. <br><br> Returns the following if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_caller_id_by_id_with_http_info(callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callerid_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_caller_id_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callerid_id' is set
        if ('callerid_id' not in params) or (params['callerid_id'] is None):
            raise ValueError("Missing the required parameter `callerid_id` when calling `delete_caller_id_by_id`")

        resource_path = '/callerid/{CalleridId}'.replace('{format}', 'json')
        path_params = {}
        if 'callerid_id' in params:
            path_params['CalleridId'] = params['callerid_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_caller_id_by_id(self, callerid_id, **kwargs):
        """
        Get Caller ID
        Retrieve a caller ID. <br><br> Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_caller_id_by_id(callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_caller_id_by_id_with_http_info(callerid_id, **kwargs)
        else:
            (data) = self.get_caller_id_by_id_with_http_info(callerid_id, **kwargs)
            return data

    def get_caller_id_by_id_with_http_info(self, callerid_id, **kwargs):
        """
        Get Caller ID
        Retrieve a caller ID. <br><br> Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_caller_id_by_id_with_http_info(callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['callerid_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_caller_id_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'callerid_id' is set
        if ('callerid_id' not in params) or (params['callerid_id'] is None):
            raise ValueError("Missing the required parameter `callerid_id` when calling `get_caller_id_by_id`")

        resource_path = '/callerid/{CalleridId}'.replace('{format}', 'json')
        path_params = {}
        if 'callerid_id' in params:
            path_params['CalleridId'] = params['callerid_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_caller_ids(self, **kwargs):
        """
        List Caller IDs
        Retrieve a list of caller IDs. <br><br> Returns a list of caller ID objects. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerids ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_caller_ids(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str range: Range (ie \"records=201-300\") of callerids requested
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_caller_ids_with_http_info(**kwargs)
        else:
            (data) = self.get_caller_ids_with_http_info(**kwargs)
            return data

    def get_caller_ids_with_http_info(self, **kwargs):
        """
        List Caller IDs
        Retrieve a list of caller IDs. <br><br> Returns a list of caller ID objects. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerids ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_caller_ids_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str range: Range (ie \"records=201-300\") of callerids requested
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['range']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_caller_ids" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/callerids'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'range' in params:
            header_params['Range'] = params['range']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_caller_id_by_id(self, update_caller_id_by_id_parameters, callerid_id, **kwargs):
        """
        Update Caller ID
        Update an existing caller ID. <br><br> Returns a caller ID object if a valid identifier was provided and input validation passed, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X PUT -d \"{\\\"name\\\": \\\"New Number Updated\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_caller_id_by_id(update_caller_id_by_id_parameters, callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateCallerIdByIdParameters update_caller_id_by_id_parameters: Request body (required)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_caller_id_by_id_with_http_info(update_caller_id_by_id_parameters, callerid_id, **kwargs)
        else:
            (data) = self.update_caller_id_by_id_with_http_info(update_caller_id_by_id_parameters, callerid_id, **kwargs)
            return data

    def update_caller_id_by_id_with_http_info(self, update_caller_id_by_id_parameters, callerid_id, **kwargs):
        """
        Update Caller ID
        Update an existing caller ID. <br><br> Returns a caller ID object if a valid identifier was provided and input validation passed, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X PUT -d \"{\\\"name\\\": \\\"New Number Updated\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_caller_id_by_id_with_http_info(update_caller_id_by_id_parameters, callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateCallerIdByIdParameters update_caller_id_by_id_parameters: Request body (required)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_caller_id_by_id_parameters', 'callerid_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_caller_id_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_caller_id_by_id_parameters' is set
        if ('update_caller_id_by_id_parameters' not in params) or (params['update_caller_id_by_id_parameters'] is None):
            raise ValueError("Missing the required parameter `update_caller_id_by_id_parameters` when calling `update_caller_id_by_id`")
        # verify the required parameter 'callerid_id' is set
        if ('callerid_id' not in params) or (params['callerid_id'] is None):
            raise ValueError("Missing the required parameter `callerid_id` when calling `update_caller_id_by_id`")

        resource_path = '/callerid/{CalleridId}'.replace('{format}', 'json')
        path_params = {}
        if 'callerid_id' in params:
            path_params['CalleridId'] = params['callerid_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_caller_id_by_id_parameters' in params:
            body_params = params['update_caller_id_by_id_parameters']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def verify_caller_id_by_id(self, verify_caller_id_by_id_parameters, callerid_id, **kwargs):
        """
        Verify Caller ID
        Verify a new caller ID. <br><br> Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_caller_id_by_id(verify_caller_id_by_id_parameters, callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VerifyCallerIdByIdParameters verify_caller_id_by_id_parameters: Request body (required)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.verify_caller_id_by_id_with_http_info(verify_caller_id_by_id_parameters, callerid_id, **kwargs)
        else:
            (data) = self.verify_caller_id_by_id_with_http_info(verify_caller_id_by_id_parameters, callerid_id, **kwargs)
            return data

    def verify_caller_id_by_id_with_http_info(self, verify_caller_id_by_id_parameters, callerid_id, **kwargs):
        """
        Verify Caller ID
        Verify a new caller ID. <br><br> Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. <br><br> ``` curl -i -H \"Content-Type: application/json\" -X POST -d \"{\\\"phone\\\": \\\"5555555555\\\", \\\"name\\\": \\\"New Number\\\"}\" https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid/$CALLERID_ID ```

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_caller_id_by_id_with_http_info(verify_caller_id_by_id_parameters, callerid_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VerifyCallerIdByIdParameters verify_caller_id_by_id_parameters: Request body (required)
        :param str callerid_id: CalleridId (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['verify_caller_id_by_id_parameters', 'callerid_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_caller_id_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'verify_caller_id_by_id_parameters' is set
        if ('verify_caller_id_by_id_parameters' not in params) or (params['verify_caller_id_by_id_parameters'] is None):
            raise ValueError("Missing the required parameter `verify_caller_id_by_id_parameters` when calling `verify_caller_id_by_id`")
        # verify the required parameter 'callerid_id' is set
        if ('callerid_id' not in params) or (params['callerid_id'] is None):
            raise ValueError("Missing the required parameter `callerid_id` when calling `verify_caller_id_by_id`")

        resource_path = '/verify/callerid/{CalleridId}'.replace('{format}', 'json')
        path_params = {}
        if 'callerid_id' in params:
            path_params['CalleridId'] = params['callerid_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'verify_caller_id_by_id_parameters' in params:
            body_params = params['verify_caller_id_by_id_parameters']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
